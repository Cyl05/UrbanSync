// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(PUBLIC)
  issues    Issue[]   @relation("ReportedIssues")  // Issues reported by this user
  assigned  Issue[]   @relation("AssignedIssues")  // Issues assigned to this user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  PUBLIC
  ADMIN
}

model Department {
  id        String  @id @default(cuid())
  name      String  @unique
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          String       @id @default(cuid())
  title       String
  description String
  status      IssueStatus  @default(NEW)
  latitude    Float
  longitude   Float
  photos      String[]     // Array of URLs or file paths
  reporter    User?        @relation("ReportedIssues", fields: [reporterId], references: [id])
  reporterId  String?
  assignee    User?        @relation("AssignedIssues", fields: [assigneeId], references: [id])
  assigneeId  String?
  department  Department?  @relation(fields: [departmentId], references: [id])
  departmentId String?
  activityLogs ActivityLog[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum IssueStatus {
  NEW
  IN_PROGRESS
  RESOLVED
}

model ActivityLog {
  id         String    @id @default(cuid())
  issue      Issue     @relation(fields: [issueId], references: [id])
  issueId    String
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
  content    String
  isPublic   Boolean   @default(false)
  createdAt  DateTime  @default(now())
}